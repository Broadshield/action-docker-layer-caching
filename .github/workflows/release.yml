name: CI

on:
  push:
    branches:
      - '**'
  delete:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEFAULT_BRANCH: master
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Yarn Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-${{hashFiles('./yarn.lock')}}
          restore-keys: |
            ${{ runner.os }}-${{hashFiles('./yarn.lock')}}
            ${{ runner.os }}-
      - name: Set Git User Details
        run: |
          git config user.name "${GITHUB_USER:-github-actions}"
          git config user.email "${GITHUB_EMAIL:-github-actions@@users.noreply.github.com}"
      - name: Output info
        id: info
        run: |
          if [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            echo '::set-output name=commit_message::'
            exit 0
          fi
          echo '::set-output name=commit_message::[auto]'


      - name: Yarn Install
        id: install
        run: |
          yarn install

      - name: Yarn Test
        id: unit_test
        run: |
          yarn test
      - name: Yarn Build
        id: build
        run: |
          yarn build
      - name: Yarn Bump
        id: bump
        run: |
          if [[ "${GITHUB_REF#refs/heads/}" == "${DEFAULT_BRANCH}" ]]; then
            yarn version -i patch
            echo "::set-output name=release_type::Patch"
            else
            yarn version -i prerelease
            echo "::set-output name=release_type::Prerelease"
          fi
          echo "::set-output name=version::$(yarn current-version)"
      - name: Git Commit Bump
        id: commit_bump
        run: |
          COMMIT_MESSAGE="${{ steps.bump.outputs.release_type}} v${{ steps.bump.outputs.version }} ${{ steps.info.outputs.commit_message }}"
          git add dist .yarn package.json
          git commit -m "chore(autorelease): ${COMMIT_MESSAGE}'
          git push -f
          echo "::set-output name=commit_sha::$(git rev-parse HEAD)"
          echo "::set-output name=message::${RELEASE_MESSAGE}"
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: "${DEFAULT_BRANCH}"
          custom_tag: v${{ steps.bump.outputs.version }}
          commit_sha: ${{ steps.commit_bump.outputs.commit_sha }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - uses: actions/upload-artifact@v3
        if: github.event_name != 'delete'
        with:
          name: built
          path: ./

      - name: Output matrix
        id: set_matrix
        uses: actions/github-script@v3
        with:
          script: |
            return {
              inspect_image: [
                'test_project_scratch',
                'hello-world',
                'nothing'
              ],
              os: [
                'ubuntu-latest',
                'windows-latest',
              ],
              include: [
                {
                  inspect_image: 'test_project_scratch',
                  prepare_command: 'docker-compose -f test_project/docker-compose.yml -p test_project pull',
                  build_command: 'docker-compose -f test_project/docker-compose.yml -p test_project build',
                }, {
                  inspect_image: 'hello-world',
                  prepare_command: ':',
                  build_command: 'docker pull hello-world',
                }, {
                  inspect_image: 'nothing',
                  os: 'ubuntu-latest',
                  prepare_command: 'docker tag node:16-alpine nothing',
                  build_command: ':',
                }, {
                  inspect_image: 'nothing',
                  os: 'windows-latest',
                  prepare_command: 'docker tag mcr.microsoft.com/windows/nanoserver:1809 nothing',
                  build_command: ':',
                }, {
                  branch: process.env.GITHUB_REF.replace('refs/heads/', '')
                }
              ],
              exclude: [
                {
                  inspect_image: 'test_project_scratch',
                  os: 'windows-latest',
                },
              ],
            }

    outputs:
      matrix: ${{ steps.set_matrix.outputs.result }}

  test_saving:
    if: github.event_name != 'delete'
    needs: build
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - run: ${{ matrix.prepare_command }}

      - name: Download action
        uses: actions/download-artifact@v3
        with:
          name: built
          path: action-dlc

      - uses: ./action-dlc
        name: Run satackey/action-docker-layer-caching@${{ matrix.branch }}
        with:
          key: docker-layer-caching-${{ matrix.os }}-${{ matrix.inspect_image }}-sha:${{ github.sha }}-{hash}

      - run: ${{ matrix.build_command }}

  test_restoring:
    needs: [build, test_saving]
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - run: ${{ matrix.prepare_command }}

      - name: Extract
        id: extract
        run: |
          echo "##[set-output name=branch;]${GITHUB_REF#refs/heads/}"

      - name: Download action
        uses: actions/download-artifact@v3
        with:
          name: built
          path: action-dlc

      - uses: ./action-dlc
        name: Run satackey/action-docker-layer-caching@${{ matrix.branch }}
        with:
          key: never-restored-docker-layer-caching-${{ matrix.os }}-${{ matrix.inspect_image }}-sha:${{ github.sha }}-{hash}
          restore-keys: docker-layer-caching-${{ matrix.os }}-${{ matrix.inspect_image }}-sha:${{ github.sha }}-
          skip-save: 'true'

      - name: Show cached image info
        run: docker inspect ${{ matrix.inspect_image }}

      - name: Get cached image ID
        run: echo ::set-output name=id::$(docker image ls -q ${{ matrix.inspect_image }})
        id: cached

      - run: ${{ matrix.build_command }}

      - name: Show built image info
        run: docker inspect ${{ matrix.inspect_image }}

      - name: Show built image ID
        run: echo ::set-output name=id::$(docker image ls -q ${{ matrix.inspect_image }})
        id: latest

      - name: Compare cached ID and after build ID
        run: |
          if [ ! '${{ steps.cached.outputs.id }}' = '${{ steps.latest.outputs.id }}' ];then
            echo cached != latest
            exit 1
          fi
